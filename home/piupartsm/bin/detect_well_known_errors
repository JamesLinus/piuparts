#!/bin/bash

# Copyright 2009-2010 Holger Levsen (holger@layer-acht.org)
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA


PIUPARTS_CONF=${PIUPARTS_CONF:-/etc/piuparts/piuparts.conf}
[ -f "$PIUPARTS_CONF" ] || exit 0

# usage: get_config_value VARIABLE section key [default]
get_config_value()
{
	local section key value
	test -n "$1" && test "$1" = "$(echo "$1" | tr -c -d '[:alnum:]_')" || exit 1
	section="$2"
	key="$3"
	value="$(sed -rn '\#^\['"$section"'\]#,/^\[/ {/^'"$key"'\s*=/ {s/^'"$key"'\s*=\s*//; s/\s*$//; p}}' "$PIUPARTS_CONF")"
	test -n "$value" || value="$4"
	if [ -z "$value" ]; then
		echo "'$key' not set in section [$section] of $PIUPARTS_CONF, exiting." >&2
		exit 1
	fi
	eval "$1"='"$value"'
}

get_config_value MASTER global master-directory
get_config_value SECTIONS global sections


#
# loop through all known problems
#
HTDOCS=/org/piuparts.debian.org/htdocs
LOGS=`mktemp`

# bash has some severe limitations, like no named arrays... :/
NR=0
for SECTION in $SECTIONS ; do 
	mkdir -p $HTDOCS/$SECTION
	KNOWNLOGS[$NR]=`mktemp`
	cd $MASTER/$SECTION
	for problem in `ls ~/bin/known_problems` ; do
		# source files to get COMMAND, HELPTEXT and ISSUE
		. ~/bin/known_problems/$problem 				
		printf "%b" "$COMMAND" > $LOGS
		if [ -s $LOGS ] ; then 
			OUTPUT=$HTDOCS/$SECTION/${problem%.conf}.tpl
			echo '<table class="righttable"><tr class="titlerow"><td class="titlecell">' > $OUTPUT
			echo "$HEADER in $SECTION" >> $OUTPUT
			echo '</td></tr><tr class="normalrow"><td class="contentcell2">' >> $OUTPUT
			echo "$HELPTEXT" >> $OUTPUT
                        echo "<p>The commandline to find these logs is: <pre>" >> $OUTPUT
			grep --color=never COMMAND ~/bin/known_problems/$problem |sed -e "s#| #| \\ \n  #g" >> $OUTPUT
			echo "</pre></p>" >> $OUTPUT
			echo '</td></tr><tr class="titlerow"><td class="alerttitlecell">Please file bugs!</td></tr></tr><tr class="normalrow"><td class="contentcell2" colspan="3">' >> $OUTPUT
			echo "<ul>" >> $OUTPUT
			COUNT=0
			for LOG in $(cat $LOGS|sort) ; do
				PACKAGE=$(echo $LOG | cut -d "_" -f1|cut -d "/" -f2)
				LATEST=$(ls -tr1 --color=none fail/${PACKAGE}_* bugged/${PACKAGE}_* pass/${PACKAGE}_* 2>/dev/null|tail -1|cut -d "/" -f1)
				if [ "${problem%_error.conf}_error.conf" = "$problem" ] ; then 
					LATESTFAIL=$(ls -tr1 --color=none fail/${PACKAGE}_* bugged/${PACKAGE}_*  2>/dev/null|tail -1)
					if [ "$LATEST" != "pass" ] && [ "$LATESTFAIL" = "$LOG" ] ; then 
						echo "<li><a href='/$SECTION/$LOG'>$LOG</a> (<a href=\"http://bugs.debian.org/$PACKAGE?dist=unstable\" target=\"_blank\">BTS</a>)</li>" >> $OUTPUT
						echo "$LOG" >> ${KNOWNLOGS[$NR]}
						COUNT=$((COUNT+1))
					fi
				else
					# this is an issue, not an error
					LATESTSUCCESS=$(ls -tr1 --color=none pass/${PACKAGE}_* 2>/dev/null|tail -1)
					if [ "$LATEST" = "pass" ] && [ "$LATESTSUCCESS" = "$LOG" ] ; then 
						echo "<li><a href='/$SECTION/$LOG'>$LOG</a> (<a href=\"http://bugs.debian.org/$PACKAGE?dist=unstable\" target=\"_blank\">BTS</a>)</li>" >> $OUTPUT
						echo "$LOG" >> ${KNOWNLOGS[$NR]}
						COUNT=$((COUNT+1))
					fi 
				fi
			done
			echo "</ul>" >>$OUTPUT
			echo "<p>Affected packages in $SECTION: $COUNT</p></td></tr></table>" >> $OUTPUT
		else
			touch ${KNOWNLOGS[$NR]}
		fi
        done
	NR=$((NR+1))
done
rm $LOGS

#
# report unknown failures
#
UNKNOWNLOGS=`mktemp`

NR=0
for SECTION in $SECTIONS ; do 
	cd $MASTER/$SECTION
	find fail -name "*.log" > $LOGS
	grep -v -f ${KNOWNLOGS[$NR]} $LOGS > $UNKNOWNLOGS
	if [ -s $UNKNOWNLOGS ] ; then
		OUTPUT=$HTDOCS/$SECTION/unknown_failures.tpl
		echo '<table class="righttable"><tr class="titlerow"><td class="titlecell">' > $OUTPUT
		echo "Packages with failures not yet well known detected in $SECTION" >> $OUTPUT
		echo '</td></tr><tr class="normalrow"><td class="contentcell2">' >> $OUTPUT
		echo "<p>Please investigate and improve detection of known error types!</p>" >> $OUTPUT
		echo '</td></tr><tr class="titlerow"><td class="alerttitlecell">Please file bugs!</td></tr></tr><tr class="normalrow"><td class="contentcell2" colspan="3">' >> $OUTPUT
		COUNT=0
		echo "<ul>" >> $OUTPUT
		for LOG in $(cat $UNKNOWNLOGS|sort) ; do
			PACKAGE=$(echo $LOG | cut -d "_" -f1|cut -d "/" -f2)
			LATEST=$(ls -tr1 --color=none fail/${PACKAGE}_* bugged/${PACKAGE}_* pass/${PACKAGE}_* 2>/dev/null|tail -1|cut -d "/" -f1)
			LATESTFAIL=$(ls -tr1 --color=none fail/${PACKAGE}_* bugged/${PACKAGE}_*  2>/dev/null|tail -1)
			if [ "$LATEST" != "pass" ] && [ "$LATESTFAIL" = "$LOG" ] ; then 
				echo "<li><a href='/$SECTION/$LOG'>$LOG</a> (<a href=\"http://bugs.debian.org/$PACKAGE?dist=unstable\" target=\"_blank\">BTS</a>)</li>" >> $OUTPUT
				COUNT=$((COUNT+1))
			fi
		done
		echo "</ul>" >> $OUTPUT
		echo "<p>Affected packages in $SECTION: $COUNT</p></td></tr></table>" >> $OUTPUT
	fi
	rm $LOGS ${KNOWNLOGS[$NR]} $UNKNOWNLOGS
	NR=$((NR+1))
done

